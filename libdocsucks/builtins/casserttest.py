# -*- coding: utf-8 -*-
#
# libdocsucks -- generate tests for code in documentation
#
# Copyright 2017 Richard Liebscher.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import libdocsucks
from libdocsucks import TestCodeGenerator, registry, ConfigValue

CPP_ASSERT_TEST_SUITE_TEMPLATE = """\
// generated by {docsucks}
{includes}

{usings}

int main()
{{
  {testCases}  
}}
"""

CPP_ASSERT_TEST_CASE_TEMPLATE = '''\
  {{
    ::docsucks::test_case _docsucks_test_case_;
    try {{ 
      {}   
    }} catch(...) {{
      assert(false && "exception in test case");
    }}
  }}  
'''

CPP_ASSERT_TEST_CASE_PART_TEMPLATE = '''\
      {code}
      
      assert(strcmp("{expecation}", _docsucks_test_case_.get_stdout().c_str()) == 0);
      _docsucks_test_case_.reset();
'''

class CppAssertTest(TestCodeGenerator):

  def __init__(self):
    super(CppAssertTest, self).__init__("casserttest", "C++ Assert Test")

  def generateTest(self, moduleTestCodeList, filename, source_filename, config):
    def genInclude(include):
      if include.startswith("."):
        return '#include "{}"'.format(include)
      else:
        return '#include <{}>'.format(include)

    def genUsing(using):
      return 'using namespace {};'.format(using)

    if not os.path.isabs(source_filename):
      source_filename = "./" + source_filename

    includes = [source_filename]
    includes.append(os.path.join(os.path.dirname(__file__), "casserttest.h"))
    includes.extend(config.get("includes", ()))

    fileCode = CPP_ASSERT_TEST_SUITE_TEMPLATE.format(
      docsucks="docsucks " + libdocsucks.version,
      testCases="\n".join(
        CPP_ASSERT_TEST_CASE_TEMPLATE.format(
          "\n".join(
            CPP_ASSERT_TEST_CASE_PART_TEMPLATE.format(
              code=x.line_str,
              expecation=x.expection if x.expection else ""
            )
            for x in moduleTestCode.test_lines
          ),
          expecation=moduleTestCode
        )
        for moduleTestCode in moduleTestCodeList
        if moduleTestCode
      ),
      includes="\n".join(genInclude(include) for include in includes),
      usings="\n".join(genUsing(using) for using in config.get("namespaces", ())),
    )
    print(fileCode)
#    with open(filename, "w") as f:
#      f.write(fileCode)

  def getConfig(self):
    return {
      "namespaces": ConfigValue(
        description="List of namespaces to include a `using namespace ...`",
        default_value=("std",)
      ),
      "includes": ConfigValue(
        description="List of includes to add. "
          "Includes starting with a dot are included through double quotes.",
        default_value=()
      ),
    }

registry.registerGenerator(CppAssertTest())
registry.setDefaultGenerator("c", "casserttest")
registry.setDefaultGenerator("c++", "casserttest")
